// SPDX-License-Identifier: MIT
pragma solidity ^0.8.0;

contract AdvancedSmartContract {
    address private owner;
    uint256 private data;
    mapping(address => bool) private allowedAddresses;

    event DataUpdated(uint256 newData);
    event AccessGranted(address indexed allowedAddress);
    event AccessRevoked(address indexed revokedAddress);

    modifier onlyOwner() {
        require(msg.sender == owner, "Only the contract owner can call this function");
        _;
    }

    modifier onlyAllowed() {
        require(allowedAddresses[msg.sender], "Caller is not allowed to access this function");
        _;
    }

    constructor(uint256 initialData) {
        owner = msg.sender;
        data = initialData;
    }

    function updateData(uint256 newData) external onlyOwner {
        require(newData != data, "New data must be different from current data");
        data = newData;
        emit DataUpdated(newData);
    }

    function grantAccess(address allowedAddress) external onlyOwner {
        require(!allowedAddresses[allowedAddress], "Address is already allowed");
        allowedAddresses[allowedAddress] = true;
        emit AccessGranted(allowedAddress);
    }

    function revokeAccess(address revokedAddress) external onlyOwner {
        require(allowedAddresses[revokedAddress], "Address is not allowed");
        allowedAddresses[revokedAddress] = false;
        emit AccessRevoked(revokedAddress);
    }

    function getData() external view onlyAllowed returns (uint256) {
        return data;
    }
}
